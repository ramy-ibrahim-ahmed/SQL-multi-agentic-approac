from typing import Optional

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from langchain_core.messages import HumanMessage

from .workflow import GRAPH

app = FastAPI(
    title="Graph SQL Agent API",
    description="API to interact with a LangGraph workflow for generating and executing SQL queries based on user instructions.",
    version="0.0.1",
)


class InvokeRequest(BaseModel):
    instruction: str = Field(
        ...,
        description="The natural language instruction or question for the database.",
    )


class InvokeResponse(BaseModel):
    final_answer: Optional[str] = Field(
        None, description="The final answer generated by the workflow."
    )
    executed_sql: Optional[str] = None
    # error_message: Optional[str] = None
    # state_history: Optional[List[Dict[str, Any]]] = None


@app.post(
    "/invoke",
    response_model=InvokeResponse,
    summary="Process an instruction through the SQL query workflow",
    tags=["Workflow"],
)
async def invoke_workflow(request: InvokeRequest):
    initial_state = {
        "messages": [HumanMessage(content=request.instruction)],
    }

    try:
        final_state_dict = await GRAPH.ainvoke(initial_state, {"recursion_limit": 50})
        final_answer = final_state_dict.get("final_answer")
        executed_sql = final_state_dict.get("last_query")

        if final_answer is None:
            return InvokeResponse(final_answer=None)

        return InvokeResponse(final_answer=final_answer, executed_sql=executed_sql)

    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"An internal error occurred while processing the request: {str(e)}",
        )
